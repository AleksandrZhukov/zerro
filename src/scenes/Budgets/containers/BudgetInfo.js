import React, { useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { formatMoney } from 'helpers/format'
import { format } from 'date-fns'
import ru from 'date-fns/locale/ru'
import styled, { css } from 'styled-components'
import { getTotalsByMonth } from '../selectors/getTotalsByMonth'
import { getUserCurrencyCode } from 'store/serverData'
import { Droppable } from 'react-beautiful-dnd'
import Confirm from 'components/Confirm'
import {
  copyPreviousBudget,
  fillGoals,
  startFresh,
  fixOverspends,
} from '../thunks'

const getMonthName = date => format(date, 'LLL', { locale: ru }).toLowerCase()

const Body = styled.div`
  position: relative;
  min-width: 0;
  max-height: 90vh;
  padding: 112px 16px 16px;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 6px;
`

const ToBeBudgeted = styled.div`
  position: absolute;
  top: -1px;
  right: -1px;
  left: -1px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 104px;
  padding: 16px;
  background: linear-gradient(
      105.52deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.3) 100%
    ),
    #cc1414;
  border-radius: 6px;
  box-shadow: 0 8px 16px rgba(204, 20, 20, 0.3);
  transition: 0.4s;

  ${props =>
    props.positive &&
    css`
      background: linear-gradient(
          105.67deg,
          rgba(255, 255, 255, 0) 0%,
          rgba(255, 255, 255, 0.3) 100%
        ),
        #21a355;
      box-shadow: 0 8px 16px rgba(33, 163, 85, 0.3);
    `}
`

const Amount = styled.div`
  color: #fff;
  font-weight: normal;
  font-size: 32px;
  line-height: 40px;
`

const Text = styled.div`
  color: #fff;
`
export default function BudgetInfo({ index, ...rest }) {
  const currency = useSelector(getUserCurrencyCode)
  const totals = useSelector(state => getTotalsByMonth(state)[index])
  const {
    date,
    available,
    prevOverspent,
    toBeBudgeted,
    funds,
    overspent,
    income,
    prevFunds,
    transferOutcome,
    transferFees,
    realBudgetedInFuture,
    budgeted,
    moneyInBudget,
    budgetedInFuture,
    outcome,
  } = totals

  const [opened, setOpened] = useState(false)
  const formatSum = sum => formatMoney(sum, currency)
  const dispatch = useDispatch()

  return (
    <Body {...rest}>
      <Droppable droppableId="toBeBudgeted" type="FUNDS">
        {({ innerRef, placeholder }) => (
          <ToBeBudgeted positive={toBeBudgeted >= 0} ref={innerRef}>
            <span style={{ display: 'none' }}>{placeholder}</span>

            <Amount>{formatSum(toBeBudgeted)}</Amount>
            <Text onClick={() => setOpened(!opened)}>
              –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            </Text>
          </ToBeBudgeted>
        )}
      </Droppable>
      <Line
        name={`–î–æ—Ö–æ–¥ –∑–∞ ${getMonthName(date)}`}
        amount={income}
        currency={currency}
      />
      <Line
        name={`–û—Å—Ç–∞—Ç–æ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ`}
        amount={prevFunds}
        currency={currency}
      />
      <Line
        name={`–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –≤ –ø—Ä–æ—à–ª–æ–º`}
        amount={-prevOverspent}
        currency={currency}
      />
      <Line
        name={`–ü–ª–∞–Ω –Ω–∞ ${getMonthName(date)}`}
        amount={-budgeted}
        currency={currency}
      />
      <Line
        name={`–ü–µ—Ä–µ–≤–æ–¥—ã`}
        amount={-transferOutcome - transferFees}
        currency={currency}
      />
      <Line
        name={`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–µ–º`}
        amount={-budgetedInFuture}
        currency={currency}
      />
      {opened && (
        <>
          <Line name={realBudgetedInFuture > budgetedInFuture ? `üéÉ` : `ü§ì`} />
          <Confirm
            title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –±—é–¥–∂–µ—Ç—ã?"
            description="–ë—é–¥–∂–µ—Ç—ã –±—É–¥—É—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ—Å—è—Ü–µ."
            onOk={() => dispatch(copyPreviousBudget(date))}
            okText="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
            cancelText="–û—Ç–º–µ–Ω–∞"
          >
            <Line name="‚ñ∂Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞..." />
          </Confirm>

          <Confirm
            title="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏?"
            description="–ë—é–¥–∂–µ—Ç—ã –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å."
            onOk={() => dispatch(fillGoals(date))}
            okText="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏"
            cancelText="–û—Ç–º–µ–Ω–∞"
          >
            <Line name="‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü..." />
          </Confirm>

          <Confirm
            title="–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ?"
            description="–û—Å—Ç–∞—Ç–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å–±—Ä–æ—Å—è—Ç—Å—è, –∞ –±—é–¥–∂–µ—Ç—ã –≤ –±—É–¥—É—â–µ–º —É–¥–∞–ª—è—Ç—Å—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ú–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç—ã, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å."
            onOk={() => dispatch(startFresh(date))}
            okText="–°–±—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏"
            cancelText="–û—Ç–º–µ–Ω–∞"
          >
            <Line name="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ..." />
          </Confirm>

          {!!overspent && (
            <Confirm
              title="–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–æ–≤?"
              onOk={() => dispatch(fixOverspends(date))}
              okText="–ü–æ–∫—Ä—ã—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥—ã"
              cancelText="–û—Ç–º–µ–Ω–∞"
            >
              <Line name="‚ñ∂Ô∏è –ü–æ–∫—Ä—ã—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥—ã..." />
            </Confirm>
          )}
          <Line name={`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ`} amount={available} currency={currency} />
          <Line name={`–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥`} amount={overspent} currency={currency} />
          <Line name={`–†–∞—Å—Ö–æ–¥`} amount={outcome} currency={currency} />
          <Line
            name={`–í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã`}
            amount={-transferOutcome}
            currency={currency}
          />
          <Line
            name={`–ü–æ—Ç–µ—Ä–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö`}
            amount={-transferFees}
            currency={currency}
          />
          <Line
            name={`realBudgetedInFuture`}
            amount={realBudgetedInFuture}
            currency={currency}
          />
          <Line name={`–í –±—é–¥–∂–µ—Ç–µ`} amount={moneyInBudget} currency={currency} />
        </>
      )}
    </Body>
  )
}

function Line({ name, amount, currency, onClick }) {
  return (
    <LineBody onClick={onClick}>
      <LineName>{name}</LineName>
      {(amount || amount === 0) && <div>{formatMoney(amount, currency)}</div>}
    </LineBody>
  )
}
const LineBody = styled.div`
  display: flex;
  flex-direction: row;
  min-width: 0;
  margin-top: 8px;
  color: var(--text-secondary);
`
const LineName = styled.div`
  flex-grow: 1;
  min-width: 0;
  margin-right: 8px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
`
